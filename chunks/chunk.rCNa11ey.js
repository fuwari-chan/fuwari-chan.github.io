import{c as createComponent,r as renderTemplate,m as maybeRenderHead,u as unescapeHTML}from"./chunk.BElhfJQu.js";const html='<h3 id="pengertian-nodejs">Pengertian NodeJS<a class="anchor" href="#pengertian-nodejs"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ol>\n<li>Apa itu NodeJS</li>\n</ol>\n<p style="text-align: justify;">\nÂ  Â  Node.js adalah runtime environment untuk JavaScript yang bersifat open-source dan cross-platform. Dengan Node.js kita dapat menjalankan kode JavaScript di mana pun, tidak hanya terbatas pada lingkungan browser.\n</p>\n<p style="text-align: justify;">\nÂ  Â  Node.js menjalankan V8 JavaScript engine (yang juga merupakan inti dari Google Chrome) di luar browser. Ini memungkinkan Node.js memiliki performa yang tinggi.\n</p>\n<p style="text-align: justify;">\nÂ  Â  Node.js juga menyediakan banyak library/module JavaScript yang membantu menyederhanakan pengembangan aplikasi web. Berikut ini adalah beberapa fitur penting dari Node.js yang menjadikannya pilihan utama dalam pengembangan aplikasi:\n</p>\n> - Asynchronous &#x26; Event-driven\n<p style="text-align: justify;">\nÂ  Â  Semua API dari Node.js bersifat asynchronous, artinya tidak memblokir proses lain sembari menunggu satu proses selesai. Server Node.js akan melanjutkan ke ke pemanggilan API berikutnya lalu memanfaatkan mekanisme event notification untuk mendapatkan respon dari panggilan API sebelumnya.\n</p>\n<blockquote>\n<ul>\n<li>Very Fast</li>\n</ul>\n</blockquote>\n<p style="text-align: justify;">\nÂ  Â  Eksekusi kode dengan Node.js sangat cepat karena berjalan pada V8 JavaScript Engine dari Google Chrome.\n</p>\n<blockquote>\n<ul>\n<li>Single Threaded but Highly Scalable</li>\n</ul>\n</blockquote>\n<p style="text-align: justify;">\nÂ  Â  Node.js menggunakan model single thread dengan event looping. Mekanisme ini membantu server untuk merespon secara asynchronous dan menjadikan server lebih scalable dibandingkan server tradisional yang menggunakan banyak thread untuk menangani permintaan.\n</p>\n<p style="text-align: justify;">\nÂ  Â  Node.js dirancang untuk aplikasi dengan proses I/O yang intensif seperti network server atau backend API. Pemrograman dengan multithreading relatif lebih berat dan sulit untuk dilakukan. Jika kita ingin membuat web server yang bisa menangani ratusan request bersamaan, menggunakan ratusan thread akan membutuhkan memori yang besar. Oleh karena itu, karakteristik Node yang asynchronous dan single thread dirancang untuk memungkinkan implementasi server yang dapat menangani banyak request pada waktu yang sama.\n</p>\n<p style="text-align: justify;">\nÂ  Â  Setelah berhasil menjadi JavaScript Runtime yang dapat mengeksekusi kode JavaScript di luar browser, Node.js seolah-olah menjadi gerbang bagi para JavaScript Developer untuk mengembangkan sistem di luar dari browser. Dengan adanya Node.js, JavaScript menjadi bahasa multiplatform yang banyak menggiring developer untuk menggunakannya. Popularitas JavaScript pun meroket! JavaScript menjadi salah satu pilihan tepat dalam membangun web server, terlebih bila Anda adalah seorang Front-End Web Developer. Anda tentu tidak perlu menggunakan bahasa yang berbeda dalam membangun Back-End. Anda bisa menjadi Full-Stack Developer dengan mempelajari satu bahasa pemrograman saja.\n</p>\n<ol start="2">\n<li>Dasar-Dasar NodeJS</li>\n</ol>\n<p style="text-align: justify;">\nÂ  Â  Bagi kamu yang ingin mulai belajar mengenai Node.js, berikut adalah milestone pengetahuan dasar penting yang seminimum mungkin wajib dipelajari.\n</p>\n<blockquote>\n<ul>\n<li>Membuat proyek Node.js baru</li>\n<li>Mengeksekusi JavaScript dengan Node.js</li>\n<li>Mengetahui Node.js Global Object</li>\n<li>Memahami Modularization</li>\n<li>Menggunakan Node Package Manager</li>\n<li>Memahami Eventing</li>\n<li>Memahami Filesystem</li>\n<li>Memahami teknik Readable Stream dan Writable Stream</li>\n</ul>\n</blockquote>\n<h3 id="membuat-proyek-nodejs-di-windows">Membuat Proyek Node.js Di windows<a class="anchor" href="#membuat-proyek-nodejs-di-windows"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ol>\n<li>Sebelum membuat proyek, buatlah folder baru terlebih dahulu. Folder ini akan digunakan sebagai tempat penyimpanan berkas proyek dan JavaScript yang kita tulis nanti. Kami sarankan, Anda buat folder tersebut di alamat C -> javascript-projects -> nodejs-basic bagi pengguna Windows; home -> javascript-projects -> nodejs-basic bagi pengguna Linux atau macOS.</li>\n</ol>\n<center><img src="https://dicoding-assets.sgp1.cdn.digitaloceanspaces.com/blog/wp-content/uploads/2021/05/membuat-proyek-Node.js-baru-langkah-1-768x422.png"></center>\n<ol start="2">\n<li>Selanjutnya, buka folder nodejs-basic menggunakan VSCode. Caranya, pada Visual Studio Code pilih menu File -> Open Folder -> [pilih foldernya]. Folder pun berhasil terbuka melalui VSCode.</li>\n</ol>\n<center><img src="https://dicoding-assets.sgp1.cdn.digitaloceanspaces.com/blog/wp-content/uploads/2021/05/membuat-proyek-Node.js-baru-langkah-2.png"></center>\n<ol start="3">\n<li>\n<p>Untuk membuat proyek JavaScript, silakan buka Terminal pada VSCode. Pilih menu Terminal -> New Terminal, kemudian tuliskan perintah: npm init\nNPM alias Node Package Manager merupakan JavaScript Package Manager bawaan dari Node.js. Melalui NPM ini kita dapat membuat Node.js package (proyek) dan mengelola penggunaan package eksternal yang digunakan. Kita akan membahas NPM lebih detail nanti.</p>\n</li>\n<li>\n<p>Jika Anda yang tidak menggunakan Visual Studio Code, gunakan Terminal/Command Prompt usungan OS Anda. Namun, sesuaikan lokasinya pada folder proyek ya.</p>\n</li>\n<li>\n<p>Setelah menuliskan perintah di atas, Anda akan diberikan beberapa pertanyaan untuk mengisi nilai package name, version, description. Semua itu merupakan informasi dasar dari aplikasi yang Anda buat.</p>\n</li>\n</ol>\n<center><img src="https://dicoding-assets.sgp1.cdn.digitaloceanspaces.com/blog/wp-content/uploads/2021/05/membuat-proyek-Node.js-baru-langkah-3-768x267.png"></center>\n<ol start="6">\n<li>Nilai yang berada di dalam tanda kurung merupakan nilai default. Anda dapat menggunakan nilainya dengan langsung menekan tombol Enter. Untuk saat ini, cukup berikan semua pertanyaan dengan nilai default.</li>\n<li>Setelah mengisi seluruh pertanyaan yang diberikan, Anda akan diberitahu untuk melihat hasil akhir yang dibuat pada berkas package.json.</li>\n</ol>\n<center><img src="https://dicoding-assets.sgp1.cdn.digitaloceanspaces.com/blog/wp-content/uploads/2021/05/membuat-proyek-Node.js-baru-langkah-4-768x454.png"></center>\n<ol start="8">\n<li>Jika nilai yang ditampilkan sudah sesuai, langsung saja tekan tombol Enter. Berkas package.json pun telah berhasil dibuat pada proyek kita.</li>\n</ol>\n<center><img src="https://dicoding-assets.sgp1.cdn.digitaloceanspaces.com/blog/wp-content/uploads/2021/05/membuat-proyek-Node.js-baru-langkah-5-768x462.png"></center>\n<ol start="9">\n<li>yay! Anda berhasil membuat proyek Node.js.</li>\n</ol>\n<p style="text-align: justify;">\nÂ  Â  Setelah sukses membuat sebuah proyek Node.js, langkah selanjutnya yang harus kamu pelajari adalah cara untuk mengeksekusi JavaScript dengan Node.js. \n</p>\n<h4 id="referensi">Referensi<a class="anchor" href="#referensi"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p><a href="https://www.dicoding.com/blog/apa-itu-node-js/">Dicoding Indonesia</a></p>\n<blockquote class="admonition bdm-tip"><span class="bdm-title"><div>Sekian</div></span><p>Semoga Bermanfaat ðŸ¥³</p></blockquote>',frontmatter={title:"Pengenalan NodeJS",published:"2024-09-14T00:00:00.000Z",description:"Pengertian Nodejs dan Dasar-Dasar Nodejs",image:"/images/5051_drrr.jpg",tags:["nodeJS","Catatan"],category:"NodeJS",draft:!1,minutes:3,words:692},file="/home/kosetsu/my-doc/fuwariblog/src/content/posts/nodejs/nodejs-1.md",url=void 0;function rawContent(){return'### Pengertian NodeJS\n\n1. Apa itu NodeJS\n\n<p style="text-align: justify;">\n&nbsp; &nbsp; Node.js adalah runtime environment untuk JavaScript yang bersifat open-source dan cross-platform. Dengan Node.js kita dapat menjalankan kode JavaScript di mana pun, tidak hanya terbatas pada lingkungan browser.\n</p>\n\n<p style="text-align: justify;">\n&nbsp; &nbsp; Node.js menjalankan V8 JavaScript engine (yang juga merupakan inti dari Google Chrome) di luar browser. Ini memungkinkan Node.js memiliki performa yang tinggi.\n</p>\n\n<p style="text-align: justify;">\n&nbsp; &nbsp; Node.js juga menyediakan banyak library/module JavaScript yang membantu menyederhanakan pengembangan aplikasi web. Berikut ini adalah beberapa fitur penting dari Node.js yang menjadikannya pilihan utama dalam pengembangan aplikasi:\n</p>\n> - Asynchronous & Event-driven\n<p style="text-align: justify;">\n&nbsp; &nbsp; Semua API dari Node.js bersifat asynchronous, artinya tidak memblokir proses lain sembari menunggu satu proses selesai. Server Node.js akan melanjutkan ke ke pemanggilan API berikutnya lalu memanfaatkan mekanisme event notification untuk mendapatkan respon dari panggilan API sebelumnya.\n</p>\n\n> - Very Fast\n<p style="text-align: justify;">\n&nbsp; &nbsp; Eksekusi kode dengan Node.js sangat cepat karena berjalan pada V8 JavaScript Engine dari Google Chrome.\n</p>\n\n> - Single Threaded but Highly Scalable\n<p style="text-align: justify;">\n&nbsp; &nbsp; Node.js menggunakan model single thread dengan event looping. Mekanisme ini membantu server untuk merespon secara asynchronous dan menjadikan server lebih scalable dibandingkan server tradisional yang menggunakan banyak thread untuk menangani permintaan.\n</p>\n\n<p style="text-align: justify;">\n&nbsp; &nbsp; Node.js dirancang untuk aplikasi dengan proses I/O yang intensif seperti network server atau backend API. Pemrograman dengan multithreading relatif lebih berat dan sulit untuk dilakukan. Jika kita ingin membuat web server yang bisa menangani ratusan request bersamaan, menggunakan ratusan thread akan membutuhkan memori yang besar. Oleh karena itu, karakteristik Node yang asynchronous dan single thread dirancang untuk memungkinkan implementasi server yang dapat menangani banyak request pada waktu yang sama.\n</p>\n\n<p style="text-align: justify;">\n&nbsp; &nbsp; Setelah berhasil menjadi JavaScript Runtime yang dapat mengeksekusi kode JavaScript di luar browser, Node.js seolah-olah menjadi gerbang bagi para JavaScript Developer untuk mengembangkan sistem di luar dari browser. Dengan adanya Node.js, JavaScript menjadi bahasa multiplatform yang banyak menggiring developer untuk menggunakannya. Popularitas JavaScript pun meroket! JavaScript menjadi salah satu pilihan tepat dalam membangun web server, terlebih bila Anda adalah seorang Front-End Web Developer. Anda tentu tidak perlu menggunakan bahasa yang berbeda dalam membangun Back-End. Anda bisa menjadi Full-Stack Developer dengan mempelajari satu bahasa pemrograman saja.\n</p>\n\n2. Dasar-Dasar NodeJS\n\n<p style="text-align: justify;">\n&nbsp; &nbsp; Bagi kamu yang ingin mulai belajar mengenai Node.js, berikut adalah milestone pengetahuan dasar penting yang seminimum mungkin wajib dipelajari.\n</p>\n\n> - Membuat proyek Node.js baru\n> - Mengeksekusi JavaScript dengan Node.js\n> - Mengetahui Node.js Global Object\n> - Memahami Modularization\n> - Menggunakan Node Package Manager\n> - Memahami Eventing\n> - Memahami Filesystem\n> - Memahami teknik Readable Stream dan Writable Stream\n\n### Membuat Proyek Node.js Di windows\n\n1. Sebelum membuat proyek, buatlah folder baru terlebih dahulu. Folder ini akan digunakan sebagai tempat penyimpanan berkas proyek dan JavaScript yang kita tulis nanti. Kami sarankan, Anda buat folder tersebut di alamat C -> javascript-projects -> nodejs-basic bagi pengguna Windows; home -> javascript-projects -> nodejs-basic bagi pengguna Linux atau macOS.\n\n<center><img src="https://dicoding-assets.sgp1.cdn.digitaloceanspaces.com/blog/wp-content/uploads/2021/05/membuat-proyek-Node.js-baru-langkah-1-768x422.png"></center>\n\n2. Selanjutnya, buka folder nodejs-basic menggunakan VSCode. Caranya, pada Visual Studio Code pilih menu File -> Open Folder -> [pilih foldernya]. Folder pun berhasil terbuka melalui VSCode.\n\n<center><img src="https://dicoding-assets.sgp1.cdn.digitaloceanspaces.com/blog/wp-content/uploads/2021/05/membuat-proyek-Node.js-baru-langkah-2.png"></center>\n\n3. Untuk membuat proyek JavaScript, silakan buka Terminal pada VSCode. Pilih menu Terminal -> New Terminal, kemudian tuliskan perintah: npm init\nNPM alias Node Package Manager merupakan JavaScript Package Manager bawaan dari Node.js. Melalui NPM ini kita dapat membuat Node.js package (proyek) dan mengelola penggunaan package eksternal yang digunakan. Kita akan membahas NPM lebih detail nanti.\n\n4. Jika Anda yang tidak menggunakan Visual Studio Code, gunakan Terminal/Command Prompt usungan OS Anda. Namun, sesuaikan lokasinya pada folder proyek ya.\n5. Setelah menuliskan perintah di atas, Anda akan diberikan beberapa pertanyaan untuk mengisi nilai package name, version, description. Semua itu merupakan informasi dasar dari aplikasi yang Anda buat.\n\n<center><img src="https://dicoding-assets.sgp1.cdn.digitaloceanspaces.com/blog/wp-content/uploads/2021/05/membuat-proyek-Node.js-baru-langkah-3-768x267.png"></center>\n\n6. Nilai yang berada di dalam tanda kurung merupakan nilai default. Anda dapat menggunakan nilainya dengan langsung menekan tombol Enter. Untuk saat ini, cukup berikan semua pertanyaan dengan nilai default.\n7. Setelah mengisi seluruh pertanyaan yang diberikan, Anda akan diberitahu untuk melihat hasil akhir yang dibuat pada berkas package.json.\n\n<center><img src="https://dicoding-assets.sgp1.cdn.digitaloceanspaces.com/blog/wp-content/uploads/2021/05/membuat-proyek-Node.js-baru-langkah-4-768x454.png"></center>\n\n8. Jika nilai yang ditampilkan sudah sesuai, langsung saja tekan tombol Enter. Berkas package.json pun telah berhasil dibuat pada proyek kita.\n\n<center><img src="https://dicoding-assets.sgp1.cdn.digitaloceanspaces.com/blog/wp-content/uploads/2021/05/membuat-proyek-Node.js-baru-langkah-5-768x462.png"></center>\n\n9. yay! Anda berhasil membuat proyek Node.js.\n\n<p style="text-align: justify;">\n&nbsp; &nbsp; Setelah sukses membuat sebuah proyek Node.js, langkah selanjutnya yang harus kamu pelajari adalah cara untuk mengeksekusi JavaScript dengan Node.js. \n</p>\n\n#### Referensi\n\n[Dicoding Indonesia](https://www.dicoding.com/blog/apa-itu-node-js/)\n\n:::tip[Sekian]\nSemoga Bermanfaat ðŸ¥³\n:::\n'}function compiledContent(){return html}function getHeadings(){return[{depth:3,slug:"pengertian-nodejs",text:"Pengertian NodeJS#"},{depth:3,slug:"membuat-proyek-nodejs-di-windows",text:"Membuat Proyek Node.js Di windows#"},{depth:4,slug:"referensi",text:"Referensi#"}]}const Content=createComponent(((a,n,e)=>{const{layout:i,...t}=frontmatter;return t.file=file,t.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};